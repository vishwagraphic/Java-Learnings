package com.viswa.learnspringaop.aopexample.aspects;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Configuration;

@Configuration
@Aspect
public class LoggingAspect {
	private Logger logger = LoggerFactory.getLogger(getClass());

	@Before("execution(* com.viswa.learnspringaop.aopexample.*.*.*(..))")
	public void logMethodCall(JoinPoint joinPoint) {
		logger.info("Before Aspect - {} is Called with arguments - {}", joinPoint, joinPoint.getArgs() );
	}
	
	@After("execution(* com.viswa.learnspringaop.aopexample.*.*.*(..))")
	public void logMethodCalled(JoinPoint joinPoint) {
		logger.info("After Aspect - {} is executed", joinPoint);
	}
	
	@AfterReturning("execution(* com.viswa.learnspringaop.aopexample.*.*.*(..))")
	public void logMethodCalledAfterReturn(JoinPoint joinPoint) {
		logger.info("After Returning Aspect - {} is executed", joinPoint);
	}
}
